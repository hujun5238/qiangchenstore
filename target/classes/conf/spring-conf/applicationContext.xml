<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.1.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
	http://www.springframework.org/schema/data/mongo
	http://www.springframework.org/schema/data/mongo/spring-mongo-1.1.xsd"
	default-autowire="byName">

	<!-- 动态数据源定义文件 -->
	<import resource="classpath:conf/spring-conf/beans-define/beans-ds.xml" />

	<!-- spring 注入注解支持 -->
	<context:annotation-config />

	<!-- 支持JavaConfig的配置，用以实现XML配置和JavaConfig的混合配置START <bean class="com.cherry.cm.mongo.config.CherrySpringMongoConfig"/> -->
	<!-- 一定要加上 JavaConfig bean post-processor <bean class="org.springframework.config.java.process.ConfigurationPostProcessor"/> -->
	<!-- <bean id="exceptionTranslator" class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/> -->
	<!-- 定义repository -->
	<!-- 改用注解方式 <mongo:repositories base-package="com.cherry.cm.mongo.repositories" /> -->
	<!-- 支持JavaConfig的配置，用以实现XML配置和JavaConfig的混合配置END -->

	<!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<context:component-scan base-package="com" />

	<!-- 事务管理配置 开始 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 当抛出Exception时事务回滚 -->
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- 模块包下的logic带new开头的方法都会回滚事务 -->
	<aop:config>
		<aop:pointcut id="newOperation" expression="execution(* com.zzz.testweb.*.logic.*.new*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="newOperation" />
	</aop:config>
	<!-- 模块包下的logic带update开头的方法都会回滚事务 -->
	<aop:config>
		<aop:pointcut id="udpateOperation" expression="execution(* com.zzz.testweb.*.logic.*.update*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="udpateOperation" />
	</aop:config>
	
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- ====================================ibatis 配置Start=========================== -->
	<!--配置一个数据源,根据上面 propertyConfig指定的location去找数据库连接的配置信息 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:conf/properties/proxool-jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- 新后台品牌数据库动态数据源 -->
	<bean id="dataSource" class="com.zzz.testweb.system.db.CustomerRoutingDataSource"> 
		<property name="targetDataSources">
			<map key-type="java.lang.String">
					<entry key="CherryConfig"  value-ref="dataSourceCherryConfig" />
					<entry key="OldConfig"  value-ref="dataSourceOldConfig" />
				   <entry key="CherryBrandDB" value-ref="dataSourceCherryBrand" />
			</map>
		</property>
		<!--  -->
		<property name="defaultTargetDataSource"  ref="dataSourceOldConfig" /> 
	</bean>

	<!--根据 dataSource和configLocation创建一个SqlMapClient -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocations">
			<list>
				<value>classpath:conf/ibatis-conf/sql-map-config.xml</value>
			</list>
		</property>
	</bean>

  <bean id="baseDaoImpl" class="com.zzz.testweb.system.db.BaseDaoImpl" >  
        <property name="dataSource" ref="dataSource" />  
        <property name="sqlMapClient" ref="sqlMapClient"/>
        
  </bean>
 

</beans>
